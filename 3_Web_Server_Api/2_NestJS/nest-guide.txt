==== NESTJS PHILOSOPHY ====

Nest provides an out-of-the-box application architecture which allows developers and teams to create highly testable, scalable, loosely coupled, and easily maintainable applications. 
The architecture is heavily inspired by Angular.

==== INITIAL ACTIONS ====

- npm i -g @nestjs/cli 
- nest new project-name
- Hot Reload: https://docs.nestjs.com/recipes/hot-reload
- npm run start:dev

==== FUNDAMENTALS ====

Project structure: https://www.youtube.com/watch?v=mmbd5hcQUaY&t=193s
Lifecycle: https://docs.nestjs.com/fundamentals/lifecycle-events
Execution context (to access each proccess factors and set additional metadata): https://docs.nestjs.com/fundamentals/execution-context

==== ABOUT MODULES - https://docs.nestjs.com/modules ====

- nest g module module-name

A module is a class annotated with a @Module() decorator. Each application has at least one module, a root module.
Modules is one of the cores. Each module represents a high level piece of the system, and have its own resources, like providers and controllers.

@Module({
    providers: [], -> Module resources, like services
    controllers: [], -> Module controllers
    imports: [], -> For import other Modules - Import foreign Module
    exports: [], -> Exported resources from this module - Export resources to the importers
})

The import attribute not allow the module to use resources from the imported one automatically
In reality, the imported Module need to define its shared resources with his own export 

@Global() -> Global Module
@Module({
    providers: [], 
    controllers: [], 
    imports: [], 
    exports: [], 
})

Global modules are used by many other. They are commonly created to share helpers, utilities and database funcionalities. 
Instead of be imported by each other individual Module, they are imported by the App Module, being available to all others.

==== ABOUT SERVICES ====

Providers are other fundamental concept in Nest. Many of the basic Nest classes may be treated as a provider â€“ services, repositories, factories, helpers, and so on.
The main idea of a provider is that it can be injected as a dependency.

- command: nest g service name

==== ABOUT CONTROLLERS - https://docs.nestjs.com/controllers#controllers ====

Being other fundamental concept, controllers are responsible for handling incoming requests and returning responses to the client.

- command: nest g controller name 
- command: nest g resource name

More about before and after controllers:
- Pipe: A pipe is a class annotated with the @Injectable() decorator, which implements the PipeTransform interface. A pipe works just before a controller method is invoked and is used for data validation and transformation.
- DTO: A DTO is an object that defines how the data will be sent over the network. We could determine the DTO schema by using TypeScript interfaces, or by simple classes. They are like the "Form Request" of Laravel. Ver class-validator e class-transformer.
- Middleware: Middleware is a function which is called before the route handler. Middleware functions have access to the request and response objects.
- Guards: Guards have a single responsibility. They They are executed after all middleware and determine whether a given request will be handled by the route handler or not, depending on certain conditions (like permissions, roles, ACLs, etc).
- Serialization: Serialization is a process that happens before objects are returned in a network response. This is an appropriate place to provide rules for transforming and sanitizing the data to be returned to the client. 
- Interceptors: 

==== SECURITY ====

- Authentication: https://docs.nestjs.com/security/authentication#authentication
- JWT: https://docs.nestjs.com/security/authentication#jwt-token
- Middleware - simple requests verification: is a function which is called before the route handler, have access to the request and response objects and the next() - https://docs.nestjs.com/middleware
- Guards - advanced requests verification: Guards have access to the ExecutionContext instance, and thus know exactly what's going to be executed next. This let you interpose processing logic at exactly the right point in the request/response cycle.

==== ABOUT DATABASE AND ORM - https://docs.nestjs.com/techniques/database#database ====

Nest is database agnostic, allowing you to easily integrate with any SQL or NoSQL database. 
Connecting Nest to a database is simply a matter of loading an appropriate Node.js driver for the database, just as you would with Express or Fastify.
You can also directly use any general purpose Node.js database integration library or ORM.

- PrismaORM: https://docs.nestjs.com/recipes/prisma
- TypeORM: https://docs.nestjs.com/recipes/sql-typeorm

==== ABOUT ENTITIES - Data Mapper pattern ====

An entity is a collection of fields and associated database operations. It is used to map database table and its fields with the entities and its attributes. 

- Difference between Active Record and Data Mapper:
Using the Active Record approach, you define all your query methods inside the model itself, and you save, remove, and load objects using model methods.
Using the Data Mapper approach, you define all your query methods in separate classes called "repositories", and you save, remove, and load objects using repositories. In data mapper your entities have just their properties.

==== VIDEOS ====

Authentication with JWT: https://www.youtube.com/watch?v=4JyBeN69wq4
Authentication with Refresh Token: https://www.youtube.com/watch?v=uAKzFhE3rxU

==== PRISMA ====

- npm install prisma --save-dev
- npx prisma init --datasource-provider mysql
- npx prisma migrate dev --name init
- npx prisma db seed






